(******************************************************************************
 *                 Directory-based cache coherency protocol
 *-----------------------------------------------------------------------------
 *   INRIA - Unite de Recherche Rhone-Alpes
 *   655, avenue de l'Europe
 *   38330 Montbonnot Saint Martin
 *   FRANCE
 *-----------------------------------------------------------------------------
 *   Module       :       cache.lnt
 *   Authors      :       A. Kriouile and W. Serwe
 *   Version      :       1.1
 *   Date         :       2012/05/15 15:58:21
 *****************************************************************************)

module cache is

 (******************************************************************************
 * Data types
 *****************************************************************************)

type request is
   read, write,fetch,invalidate
   with "==", "<>"
end type

-------------------------------------------------------------------------------

type processor is
   processor_1, processor_2, processor_3
   with "==", "<>"
end type

-------------------------------------------------------------------------------

type line_t is
   L1, L2, L3
   with "==", "<>"
end type


-------------------------------------------------------------------------------


type miss is
	read_miss, write_miss, write_back
	with "==", "<>"
end type

-------------------------------------------------------------------------------

type state is
   invalid, shared, exclusive
   with "==", "<>"
end type

(*****************************************************************************
 * channel types
 *****************************************************************************)

channel line_status_channel is
   (line_t, state, processor)
end channel

-------------------------------------------------------------------------------

channel action_event_channel is
   (processor, request, line_t)
end channel

-------------------------------------------------------------------------------

channel cache_miss_channel is
(processor, miss, line_t)

(*****************************************************************************
 * Processes
 *****************************************************************************)

process MAIN [action_event    : action_event_channel,
              get_line_status,
              put_line_status : line_status_channel,
			  put_cache_miss, 
			  get_cache_miss : cache_miss_channel]
is
   par get_line_status, put_line_status in
      par
         agent [action_event, get_line_status, put_line_status, put_cache_miss, get_cache_miss ] (processor_1)
      ||
         agent [action_event, get_line_status, put_line_status, put_cache_miss, get_cache_miss] (processor_2)
      ||
         agent [action_event, get_line_status, put_line_status, put_cache_miss, get_cache_miss] (processor_3)
      end par
   ||
      REMOTE_DIRECTORY [ put_cache_miss, get_cache_miss]
   end par
end process

-------------------------------------------------------------------------------

process REMOTE_DIRECTORY [put_cache_miss, 
			  get_cache_miss : cache_miss_channel
			  put_line_status, get_line_status : line_status_channel]
is
   var line : line_t,
       SL1, SL2, SL3, status : state,
       p1, p2, p3, processor_id : processor,
       rd, write, back, miss_type : miss
   in  
       SL1:= invalid, SL2:= invalid, SL3:= invalid;
       (*add variables to include sharers here a basic array that holds up to three values and values can be removed or added accordingly*)
       
      loop
         
         get_cache_miss(?processor_id , ?miss_type, ?line)
         get_line_status(line,?status, processor_id)
         case miss_type in
            rd -> case status in
                      invalid -> put_line_status(line, shared,  processor_id)
                      (* add to array of sharers current processor *)
                      
                      shared-> put_line_status(line, shared,  processor_id)
                      (* add t oarray of sharrers current processor *)
                      
                      exclusive-> put_line_status(line, shared,  processor_id)
                      (* add current processor to sharers *) 
                                  action_event(processor_id, fetch, line)
                  end case            
            write-> if (status == shared) then
                        put_line_status(line, invalid)
                        put_line_status(line, exclusive, processor_id)
                        (* clear sharers array except for current processor*)
                    end if
                    (* if invalid for all processors ie unchached then put status to exclusive for current processor
                    if (status == invalid) then *)
                    (* if current processor is exclusive with line change nothging *)
            
            (* put status to invalid for all processors at this line.*)
            back-> 

      end loop      
   end var
end process

-------------------------------------------------------------------------------

process agent [action_event : action_event_channel,
               get_line_status,
               put_line_status : line_status_channel, put_cache_miss, 
			  get_cache_miss : cache_miss_channel] (processor_id : processor)
is
   var event:request, line:line_t, status:state, agent:processor in 
      loop
         action_event (processor_id, ?event, ?line)
         get_line_status (line, ?status,?agent);
         case event in
                 read ->  case status in
                              invalid-> put_cache_miss(processor_id, read_miss, line)
                                        get_cache_miss([processor_id, 
                            | shared -> put_line_status (line, shared, processor_id)
                            | exclusive  -> if (agent == processor_id) then
                                          put_line_status (line, exclusive, processor_id)
                                       else
                                          put_line_status (line, shared, processor_id)
                                       end if 
                       end case
 
                       put_line_status (line, shared, processor_id) 

                | write -> 	case status in
                                invalid | exclusive -> put_line_status (line, exclusive, processor_id)
                                | shared -> if (agent == processor_id) then
                                                    put_line_status(line, exclusive, processor_id)
                                            else
                                                    put_line_status(line, invalid, PROCESSSOR_id)
                                            end if
                            end case
                end if
                | fetch -> put_line_status(line, shared, processor_id)
                | invalidate -> put_line_status(line, invalid, processor_id)
                
         end case
         
      end loop
   end var
end process

end module
