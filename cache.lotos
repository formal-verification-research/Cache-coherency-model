(* generated by lnt2lotos 6.8 *)

specification CACHE [ACTION_EVENT, GET_LINE_STATUS, PUT_LINE_STATUS] : exit

behaviour
AGENT [ACTION_EVENT, GET_LINE_STATUS, PUT_LINE_STATUS] (AGENT_1)
where

library LNT_V1 endlib

type CACHE is LNTEXTENSIONS, LNTEXCEPTIONS
   sorts
      EVENT_T,
      PROCESSOR,
      LINE_T,
      STATE
   opns
      (* definitions for type EVENT_T *)
      READ (*! constructor *) :  -> EVENT_T
      WRITE (*! constructor *) :  -> EVENT_T
      FETCH (*! constructor *) :  -> EVENT_T
      INVALIDATE (*! constructor *) :  -> EVENT_T
      _eq_ : EVENT_T, EVENT_T -> BOOL
      eq : EVENT_T, EVENT_T -> BOOL
      _==_ : EVENT_T, EVENT_T -> BOOL
      == : EVENT_T, EVENT_T -> BOOL
      _<>_ : EVENT_T, EVENT_T -> BOOL
      <> : EVENT_T, EVENT_T -> BOOL

      (* definitions for type PROCESSOR *)
      PROCESSOR_1 (*! constructor *) :  -> PROCESSOR
      PROCESSOR_2 (*! constructor *) :  -> PROCESSOR
      PROCESSOR_3 (*! constructor *) :  -> PROCESSOR
      _eq_ : PROCESSOR, PROCESSOR -> BOOL
      eq : PROCESSOR, PROCESSOR -> BOOL
      _==_ : PROCESSOR, PROCESSOR -> BOOL
      == : PROCESSOR, PROCESSOR -> BOOL
      _<>_ : PROCESSOR, PROCESSOR -> BOOL
      <> : PROCESSOR, PROCESSOR -> BOOL

      (* definitions for type LINE_T *)
      L1 (*! constructor *) :  -> LINE_T
      L2 (*! constructor *) :  -> LINE_T
      L3 (*! constructor *) :  -> LINE_T
      _eq_ : LINE_T, LINE_T -> BOOL
      eq : LINE_T, LINE_T -> BOOL
      _==_ : LINE_T, LINE_T -> BOOL
      == : LINE_T, LINE_T -> BOOL
      _<>_ : LINE_T, LINE_T -> BOOL
      <> : LINE_T, LINE_T -> BOOL

      (* definitions for type STATE *)
      INVALID (*! constructor *) :  -> STATE
      SHARED (*! constructor *) :  -> STATE
      EXCLUSIVE (*! constructor *) :  -> STATE
      _eq_ : STATE, STATE -> BOOL
      eq : STATE, STATE -> BOOL
      _==_ : STATE, STATE -> BOOL
      == : STATE, STATE -> BOOL
      _<>_ : STATE, STATE -> BOOL
      <> : STATE, STATE -> BOOL

      (* operations for LNT function definitions *)
      ISALLOWEDLINE : LINE_T -> BOOL
      ISLOCAL : LINE_T, PROCESSOR -> BOOL
      NORMAL : STATE, PROCESSOR -> BOOL
      CASE__CACHE__5__NORMAL__69__FUNCTION_RESULT__NORMAL : PROCESSOR, STATE -> BOOL
      CHECK__CHANNEL__NONE :  -> BOOL
      CHECK__CHANNEL__LINE_STATUS_CHANNEL : LINE_T, STATE, PROCESSOR -> BOOL
      CHECK__CHANNEL__ACTION_EVENT_CHANNEL : PROCESSOR, EVENT_T, LINE_T -> BOOL

   eqns
      (* equations for LNT type definitions *)
      ofsort BOOL
      forall VAR__X, VAR__Y : EVENT_T
         VAR__X eq VAR__X = TRUE;
         VAR__X eq VAR__Y = FALSE;
      ofsort BOOL
      forall VAR__X, VAR__Y : EVENT_T
         eq (VAR__X, VAR__Y) = VAR__X eq VAR__Y;

      ofsort BOOL
      forall VAR__X, VAR__Y : EVENT_T
         VAR__X == VAR__X = TRUE;
         VAR__X == VAR__Y = FALSE;
      ofsort BOOL
      forall VAR__X, VAR__Y : EVENT_T
         == (VAR__X, VAR__Y) = VAR__X == VAR__Y;

      ofsort BOOL
      forall VAR__X, VAR__Y : EVENT_T
         VAR__X <> VAR__Y = not (VAR__X eq VAR__Y);
      ofsort BOOL
      forall VAR__X, VAR__Y : EVENT_T
         <> (VAR__X, VAR__Y) = VAR__X <> VAR__Y;

      ofsort BOOL
      forall VAR__X, VAR__Y : PROCESSOR
         VAR__X eq VAR__X = TRUE;
         VAR__X eq VAR__Y = FALSE;
      ofsort BOOL
      forall VAR__X, VAR__Y : PROCESSOR
         eq (VAR__X, VAR__Y) = VAR__X eq VAR__Y;

      ofsort BOOL
      forall VAR__X, VAR__Y : PROCESSOR
         VAR__X == VAR__X = TRUE;
         VAR__X == VAR__Y = FALSE;
      ofsort BOOL
      forall VAR__X, VAR__Y : PROCESSOR
         == (VAR__X, VAR__Y) = VAR__X == VAR__Y;

      ofsort BOOL
      forall VAR__X, VAR__Y : PROCESSOR
         VAR__X <> VAR__Y = not (VAR__X eq VAR__Y);
      ofsort BOOL
      forall VAR__X, VAR__Y : PROCESSOR
         <> (VAR__X, VAR__Y) = VAR__X <> VAR__Y;

      ofsort BOOL
      forall VAR__X, VAR__Y : LINE_T
         VAR__X eq VAR__X = TRUE;
         VAR__X eq VAR__Y = FALSE;
      ofsort BOOL
      forall VAR__X, VAR__Y : LINE_T
         eq (VAR__X, VAR__Y) = VAR__X eq VAR__Y;

      ofsort BOOL
      forall VAR__X, VAR__Y : LINE_T
         VAR__X == VAR__X = TRUE;
         VAR__X == VAR__Y = FALSE;
      ofsort BOOL
      forall VAR__X, VAR__Y : LINE_T
         == (VAR__X, VAR__Y) = VAR__X == VAR__Y;

      ofsort BOOL
      forall VAR__X, VAR__Y : LINE_T
         VAR__X <> VAR__Y = not (VAR__X eq VAR__Y);
      ofsort BOOL
      forall VAR__X, VAR__Y : LINE_T
         <> (VAR__X, VAR__Y) = VAR__X <> VAR__Y;

      ofsort BOOL
      forall VAR__X, VAR__Y : STATE
         VAR__X eq VAR__X = TRUE;
         VAR__X eq VAR__Y = FALSE;
      ofsort BOOL
      forall VAR__X, VAR__Y : STATE
         eq (VAR__X, VAR__Y) = VAR__X eq VAR__Y;

      ofsort BOOL
      forall VAR__X, VAR__Y : STATE
         VAR__X == VAR__X = TRUE;
         VAR__X == VAR__Y = FALSE;
      ofsort BOOL
      forall VAR__X, VAR__Y : STATE
         == (VAR__X, VAR__Y) = VAR__X == VAR__Y;

      ofsort BOOL
      forall VAR__X, VAR__Y : STATE
         VAR__X <> VAR__Y = not (VAR__X eq VAR__Y);
      ofsort BOOL
      forall VAR__X, VAR__Y : STATE
         <> (VAR__X, VAR__Y) = VAR__X <> VAR__Y;

      (* equations for LNT function definitions *)
      ofsort BOOL
      forall ANY__LINE_T__2 : LINE_T
         ISALLOWEDLINE (L1 of LINE_T) = TRUE of BOOL;
         ISALLOWEDLINE (ANY__LINE_T__2) = FALSE of BOOL;

      ofsort BOOL
      forall A : PROCESSOR
         ISLOCAL (L1 of LINE_T, A) = (A == PROCESSOR_1) of BOOL;
         ISLOCAL (L2 of LINE_T, A) = (A == PROCESSOR_2) of BOOL;
         ISLOCAL (L3 of LINE_T, A) = (A == PROCESSOR_3) of BOOL;

      ofsort BOOL
      forall S : STATE, A : PROCESSOR
         NORMAL (S, A) = CASE__CACHE__5__NORMAL__69__FUNCTION_RESULT__NORMAL (A, S);

      ofsort BOOL
      forall ANY__PROCESSOR__4 : PROCESSOR, S : STATE
         CASE__CACHE__5__NORMAL__69__FUNCTION_RESULT__NORMAL (PROCESSOR_1 of PROCESSOR, S) = TRUE of BOOL;
         CASE__CACHE__5__NORMAL__69__FUNCTION_RESULT__NORMAL (ANY__PROCESSOR__4, S) = (S == EXCLUSIVE) of BOOL;

      ofsort BOOL
         CHECK__CHANNEL__NONE = TRUE;

      ofsort BOOL
      forall P1 : LINE_T, P2 : STATE, P3 : PROCESSOR
         P3 = P3, P2 = P2, P1 = P1 => CHECK__CHANNEL__LINE_STATUS_CHANNEL (P1, P2, P3) = TRUE;

      ofsort BOOL
      forall P1 : PROCESSOR, P2 : EVENT_T, P3 : LINE_T
         P3 = P3, P2 = P2, P1 = P1 => CHECK__CHANNEL__ACTION_EVENT_CHANNEL (P1, P2, P3) = TRUE;

endtype

(* processes for LNT process definitions *)

process MAIN [ACTION_EVENT, GET_LINE_STATUS, PUT_LINE_STATUS] : exit :=
   (
      AGENT [ACTION_EVENT, GET_LINE_STATUS, PUT_LINE_STATUS] (PROCESSOR_1)
      |||
      AGENT [ACTION_EVENT, GET_LINE_STATUS, PUT_LINE_STATUS] (PROCESSOR_2)
      |||
      AGENT [ACTION_EVENT, GET_LINE_STATUS, PUT_LINE_STATUS] (PROCESSOR_3)
   )
   |[GET_LINE_STATUS, PUT_LINE_STATUS]|
   REMOTE_DIRECTORY [GET_LINE_STATUS, PUT_LINE_STATUS]
endproc

process REMOTE_DIRECTORY [GET_LINE_STATUS, PUT_LINE_STATUS] : exit :=
   let LOCAL__SL1__1 : STATE = INVALID of STATE in
      (
         let LOCAL__SL2__1 : STATE = INVALID of STATE in
            (
               let LOCAL__SL3__1 : STATE = INVALID of STATE in
                  (
                     let LOCAL__AGL1__1 : PROCESSOR = PROCESSOR_1 of PROCESSOR in
                        (
                           let LOCAL__AGL2__1 : PROCESSOR = PROCESSOR_2 of PROCESSOR in
                              (
                                 let LOCAL__AGL3__1 : PROCESSOR = PROCESSOR_3 of PROCESSOR in
                                    LOOP__1 [PUT_LINE_STATUS, GET_LINE_STATUS] (LOCAL__SL1__1, LOCAL__SL2__1, LOCAL__SL3__1, LOCAL__AGL1__1, LOCAL__AGL2__1, LOCAL__AGL3__1)
                              )
                        )
                  )
            )
      )

where

   process LOOP__1 [PUT_LINE_STATUS, GET_LINE_STATUS] (LOCAL__SL1__1 : STATE, LOCAL__SL2__1 : STATE, LOCAL__SL3__1 : STATE, LOCAL__AGL1__1 : PROCESSOR, LOCAL__AGL2__1 : PROCESSOR, LOCAL__AGL3__1 : PROCESSOR) : exit :=
      GET_LINE_STATUS ?LOCAL__LINE__1 : LINE_T ?LOCAL__STATUS__1 : STATE ?LOCAL__AGENT__1 : PROCESSOR [((((((LOCAL__LINE__1 == L1) AND (LOCAL__STATUS__1 == LOCAL__SL1__1)) AND (LOCAL__AGENT__1 == LOCAL__AGL1__1)) OR (((LOCAL__LINE__1 == L2) AND (LOCAL__STATUS__1 == LOCAL__SL2__1)) AND (LOCAL__AGENT__1 == LOCAL__AGL2__1))) OR (((LOCAL__LINE__1 == L3) AND (LOCAL__STATUS__1 == LOCAL__SL3__1)) AND (LOCAL__AGENT__1 == LOCAL__AGL3__1))) AND NORMAL (LOCAL__STATUS__1, LOCAL__AGENT__1)) AND_THEN CHECK__CHANNEL__LINE_STATUS_CHANNEL (LOCAL__LINE__1, LOCAL__STATUS__1, LOCAL__AGENT__1) = TRUE of BOOL];
         LOOP__1 [PUT_LINE_STATUS, GET_LINE_STATUS] (LOCAL__SL1__1, LOCAL__SL2__1, LOCAL__SL3__1, LOCAL__AGL1__1, LOCAL__AGL2__1, LOCAL__AGL3__1)
      []
      PUT_LINE_STATUS ?LOCAL__LINE__1 : LINE_T ?LOCAL__STATUS__1 : STATE ?LOCAL__AGENT__1 : PROCESSOR [NORMAL (LOCAL__STATUS__1, LOCAL__AGENT__1) AND_THEN CHECK__CHANNEL__LINE_STATUS_CHANNEL (LOCAL__LINE__1, LOCAL__STATUS__1, LOCAL__AGENT__1) = TRUE of BOOL];
         (
            let CASE__VALUE__1 : LINE_T = LOCAL__LINE__1 in
               (
                  let CASE__BRANCH__1 : COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__TYPE = COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131 (CASE__VALUE__1) in
                     [CASE__BRANCH__1 = COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__CODE__0] ->
                        (
                           let LOCAL__SL1__1 : STATE = LOCAL__STATUS__1 in
                              (
                                 let LOCAL__AGL1__1 : PROCESSOR = LOCAL__AGENT__1 in
                                    LOOP__1 [PUT_LINE_STATUS, GET_LINE_STATUS] (LOCAL__SL1__1, LOCAL__SL2__1, LOCAL__SL3__1, LOCAL__AGL1__1, LOCAL__AGL2__1, LOCAL__AGL3__1)
                              )
                        )
                     []
                     [CASE__BRANCH__1 = COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__CODE__1] ->
                        (
                           let LOCAL__SL2__1 : STATE = LOCAL__STATUS__1 in
                              (
                                 let LOCAL__AGL2__1 : PROCESSOR = LOCAL__AGENT__1 in
                                    LOOP__1 [PUT_LINE_STATUS, GET_LINE_STATUS] (LOCAL__SL1__1, LOCAL__SL2__1, LOCAL__SL3__1, LOCAL__AGL1__1, LOCAL__AGL2__1, LOCAL__AGL3__1)
                              )
                        )
                     []
                     [CASE__BRANCH__1 = COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__CODE__2] ->
                        (
                           let LOCAL__SL3__1 : STATE = LOCAL__STATUS__1 in
                              (
                                 let LOCAL__AGL3__1 : PROCESSOR = LOCAL__AGENT__1 in
                                    LOOP__1 [PUT_LINE_STATUS, GET_LINE_STATUS] (LOCAL__SL1__1, LOCAL__SL2__1, LOCAL__SL3__1, LOCAL__AGL1__1, LOCAL__AGL2__1, LOCAL__AGL3__1)
                              )
                        )
               )
         )
   endproc

   type COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131 is LNTEXTENSIONS, CACHE
      sorts COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__TYPE
      opns
         COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131 : LINE_T -> COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__TYPE
         COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__CODE__0 (*! implementedby COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__CODE__0 constructor *),
         COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__CODE__1 (*! implementedby COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__CODE__1 constructor *),
         COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__CODE__2 (*! implementedby COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__CODE__2 constructor *) : -> COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__TYPE
      eqns
         ofsort COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__TYPE
            COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131 (L1) = COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__CODE__0;
            COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131 (L2) = COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__CODE__1;
            COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131 (L3) = COMPUTE__CASE__BRANCH__1__REMOTE_DIRECTORY__131__CODE__2;

   endtype

endproc

process AGENT [ACTION_EVENT, GET_LINE_STATUS, PUT_LINE_STATUS] (PARAM__AGENT_ID : PROCESSOR) : exit :=
   LOOP__1 [PUT_LINE_STATUS, GET_LINE_STATUS, ACTION_EVENT] (PARAM__AGENT_ID)

where

   process LOOP__1 [PUT_LINE_STATUS, GET_LINE_STATUS, ACTION_EVENT] (PARAM__AGENT_ID : PROCESSOR) : exit :=
      ACTION_EVENT !PARAM__AGENT_ID ?LOCAL__EVENT__1 : EVENT_T ?LOCAL__LINE__1 : LINE_T [ISALLOWEDLINE (LOCAL__LINE__1) AND_THEN CHECK__CHANNEL__ACTION_EVENT_CHANNEL (PARAM__AGENT_ID, LOCAL__EVENT__1, LOCAL__LINE__1) = TRUE of BOOL];
         GET_LINE_STATUS !LOCAL__LINE__1 ?LOCAL__STATUS__1 : STATE ?LOCAL__AGENT__1 : PROCESSOR [CHECK__CHANNEL__LINE_STATUS_CHANNEL (LOCAL__LINE__1, LOCAL__STATUS__1, LOCAL__AGENT__1) = TRUE of BOOL];
            (
               let CASE__VALUE__1 : EVENT_T = LOCAL__EVENT__1 in
                  (
                     let CASE__BRANCH__1 : COMPUTE__CASE__BRANCH__1__AGENT__151__TYPE = COMPUTE__CASE__BRANCH__1__AGENT__151 (CASE__VALUE__1) in
                        [CASE__BRANCH__1 = COMPUTE__CASE__BRANCH__1__AGENT__151__CODE__0] ->
                           (
                              [ISLOCAL (LOCAL__LINE__1, PARAM__AGENT_ID) = TRUE of BOOL] ->
                                 (
                                    let CASE__VALUE__2 : STATE = LOCAL__STATUS__1 in
                                       (
                                          let CASE__BRANCH__2 : COMPUTE__CASE__BRANCH__2__AGENT__153__TYPE = COMPUTE__CASE__BRANCH__2__AGENT__153 (CASE__VALUE__2) in
                                             [CASE__BRANCH__2 = COMPUTE__CASE__BRANCH__2__AGENT__153__CODE__0] ->
                                                PUT_LINE_STATUS !LOCAL__LINE__1 !SHARED !PARAM__AGENT_ID [CHECK__CHANNEL__LINE_STATUS_CHANNEL (LOCAL__LINE__1, SHARED, PARAM__AGENT_ID) = TRUE of BOOL];
                                                   LOOP__1 [PUT_LINE_STATUS, GET_LINE_STATUS, ACTION_EVENT] (PARAM__AGENT_ID)
                                             []
                                             [CASE__BRANCH__2 = COMPUTE__CASE__BRANCH__2__AGENT__153__CODE__1] ->
                                                (
                                                   [LOCAL__AGENT__1 == PARAM__AGENT_ID = TRUE of BOOL] ->
                                                      PUT_LINE_STATUS !LOCAL__LINE__1 !EXCLUSIVE !PARAM__AGENT_ID [CHECK__CHANNEL__LINE_STATUS_CHANNEL (LOCAL__LINE__1, EXCLUSIVE, PARAM__AGENT_ID) = TRUE of BOOL];
                                                         LOOP__1 [PUT_LINE_STATUS, GET_LINE_STATUS, ACTION_EVENT] (PARAM__AGENT_ID)
                                                   []
                                                   [NOT (LOCAL__AGENT__1 == PARAM__AGENT_ID) AND TRUE = TRUE of BOOL] ->
                                                      PUT_LINE_STATUS !LOCAL__LINE__1 !SHARED !PARAM__AGENT_ID [CHECK__CHANNEL__LINE_STATUS_CHANNEL (LOCAL__LINE__1, SHARED, PARAM__AGENT_ID) = TRUE of BOOL];
                                                         LOOP__1 [PUT_LINE_STATUS, GET_LINE_STATUS, ACTION_EVENT] (PARAM__AGENT_ID)
                                                )
                                       )
                                 )
                              []
                              [NOT (ISLOCAL (LOCAL__LINE__1, PARAM__AGENT_ID)) AND TRUE = TRUE of BOOL] ->
                                 PUT_LINE_STATUS !LOCAL__LINE__1 !SHARED !PARAM__AGENT_ID [CHECK__CHANNEL__LINE_STATUS_CHANNEL (LOCAL__LINE__1, SHARED, PARAM__AGENT_ID) = TRUE of BOOL];
                                    LOOP__1 [PUT_LINE_STATUS, GET_LINE_STATUS, ACTION_EVENT] (PARAM__AGENT_ID)
                           )
                        []
                        [CASE__BRANCH__1 = COMPUTE__CASE__BRANCH__1__AGENT__151__CODE__1] ->
                           PUT_LINE_STATUS !LOCAL__LINE__1 !EXCLUSIVE !PARAM__AGENT_ID [CHECK__CHANNEL__LINE_STATUS_CHANNEL (LOCAL__LINE__1, EXCLUSIVE, PARAM__AGENT_ID) = TRUE of BOOL];
                              LOOP__1 [PUT_LINE_STATUS, GET_LINE_STATUS, ACTION_EVENT] (PARAM__AGENT_ID)
                  )
            )
   endproc

   type COMPUTE__CASE__BRANCH__2__AGENT__153 is LNTEXTENSIONS, CACHE
      sorts COMPUTE__CASE__BRANCH__2__AGENT__153__TYPE
      opns
         COMPUTE__CASE__BRANCH__2__AGENT__153 : STATE -> COMPUTE__CASE__BRANCH__2__AGENT__153__TYPE
         COMPUTE__CASE__BRANCH__2__AGENT__153__CODE__0 (*! implementedby COMPUTE__CASE__BRANCH__2__AGENT__153__CODE__0 constructor *),
         COMPUTE__CASE__BRANCH__2__AGENT__153__CODE__1 (*! implementedby COMPUTE__CASE__BRANCH__2__AGENT__153__CODE__1 constructor *) : -> COMPUTE__CASE__BRANCH__2__AGENT__153__TYPE
      eqns
         ofsort COMPUTE__CASE__BRANCH__2__AGENT__153__TYPE
            COMPUTE__CASE__BRANCH__2__AGENT__153 (INVALID) = COMPUTE__CASE__BRANCH__2__AGENT__153__CODE__0;
            COMPUTE__CASE__BRANCH__2__AGENT__153 (SHARED) = COMPUTE__CASE__BRANCH__2__AGENT__153__CODE__0;
            COMPUTE__CASE__BRANCH__2__AGENT__153 (EXCLUSIVE) = COMPUTE__CASE__BRANCH__2__AGENT__153__CODE__1;

   endtype

   type COMPUTE__CASE__BRANCH__1__AGENT__151 is LNTEXTENSIONS, CACHE
      sorts COMPUTE__CASE__BRANCH__1__AGENT__151__TYPE
      opns
         COMPUTE__CASE__BRANCH__1__AGENT__151 : EVENT_T -> COMPUTE__CASE__BRANCH__1__AGENT__151__TYPE
         COMPUTE__CASE__BRANCH__1__AGENT__151__CODE__0 (*! implementedby COMPUTE__CASE__BRANCH__1__AGENT__151__CODE__0 constructor *),
         COMPUTE__CASE__BRANCH__1__AGENT__151__CODE__1 (*! implementedby COMPUTE__CASE__BRANCH__1__AGENT__151__CODE__1 constructor *) : -> COMPUTE__CASE__BRANCH__1__AGENT__151__TYPE
      eqns
         ofsort COMPUTE__CASE__BRANCH__1__AGENT__151__TYPE
            COMPUTE__CASE__BRANCH__1__AGENT__151 (READ) = COMPUTE__CASE__BRANCH__1__AGENT__151__CODE__0;
            COMPUTE__CASE__BRANCH__1__AGENT__151 (WRITE) = COMPUTE__CASE__BRANCH__1__AGENT__151__CODE__1;

   endtype

endproc

(* sorts and operations for LNT exceptions *)

type LNTEXCEPTIONS is BOOLEAN, STRING
   sorts
      EXCEPTION__NONE (*! implementedby ADT_EXCEPTION__NONE *)

   opns
      EXCEPTION__NONE__NAME__UNEXPECTED (*! implementedby ADT_EXCEPTION__NONE__NAME__UNEXPECTED external *) : -> STRING
      EXCEPTION__NONE__CONSTRUCTOR (*! implementedby ADT_EXCEPTION__NONE__CONSTRUCTOR constructor *) : STRING -> EXCEPTION__NONE
      EXCEPTION__NONE__NAME (*! implementedby ADT_EXCEPTION__NONE__NAME *) : EXCEPTION__NONE -> STRING
      EXCEPTION__NONE__UNEXPECTED (*! implementedby ADT_EXCEPTION__NONE__UNEXPECTED *) : EXCEPTION__NONE -> BOOL

   eqns
      ofsort STRING
      forall S : STRING
         EXCEPTION__NONE__NAME (EXCEPTION__NONE__CONSTRUCTOR (S)) = S;
      ofsort BOOL
      forall S : STRING
         S = EXCEPTION__NONE__NAME__UNEXPECTED => EXCEPTION__NONE__UNEXPECTED (EXCEPTION__NONE__CONSTRUCTOR (S)) = TRUE;
         EXCEPTION__NONE__UNEXPECTED (EXCEPTION__NONE__CONSTRUCTOR (S)) = FALSE;
endtype

endspec
